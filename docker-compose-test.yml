services:
  postgres:
    image: postgres:17.2
    container_name: postgres
    restart: on-failure
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-demo}
      TZ: Asia/Phnom_Penh
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ${POSTGRES_DB:-demo} -U ${POSTGRES_USER:-postgres}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    command: postgres -c shared_preload_libraries=pg_stat_statements -c pg_stat_statements.track=all -c max_connections=200
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
  pgbouncer:
    image: edoburu/pgbouncer:latest
    container_name: pgbouncer
    restart: on-failure
    ports:
      - "6432:6432"
    environment:
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    depends_on:
      - postgres
    volumes:
      - ./docker/pg/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini
      - ./docker/pg/userlist.txt:/etc/pgbouncer/userlist.txt
  redis:
    image: redis/redis-stack-server:6.2.6-v19
    container_name: redis
    restart: on-failure
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data
  rabbitmq:
    image: rabbitmq:4.1.2-management
    container_name: rabbitmq
    restart: on-failure
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq
      RABBITMQ_DEFAULT_PASS: rabbitmq
    volumes:
      - ./data/rabbitmq:/var/lib/rabbitmq
  minio:
    image: minio/minio:latest
    container_name: minio
    restart: always
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./data/minio:/data
  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: on-failure
    command: [ "-config.file=/etc/loki/config.yaml" ]
    volumes:
      - ./docker/mon/loki/config.yaml:/etc/loki/config.yaml
    ports:
      - "3100:3100"
    depends_on:
      - minio
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: on-failure
    command:
      - --enable-feature=exemplar-storage
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./docker/mon/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./docker/mon/prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml
    ports:
      - "9090:9090"
  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    restart: on-failure
    command: [ "-config.file=/etc/tempo.yaml", "-target=all" ]
    volumes:
      - ./docker/mon/tempo/tempo.yml:/etc/tempo.yaml
      - ./data/tempo:/tmp/tempo
    ports:
      - "9411:9411" # zipkin
      - "4317:4317" # OTLP gRPC
  tempo-query:
    image: grafana/tempo-query:latest
    container_name: tempo-query
    environment:
      - TEMPO_SERVER=http://tempo:3200
    ports:
      - "16686:16686"
  pyroscope:
    image: grafana/pyroscope:latest
    container_name: pyroscope
    restart: on-failure
    command: [ "-config.file=/etc/pyroscope/config.yaml" ]
    volumes:
      - ./docker/mon/pyroscope/config.yaml:/etc/pyroscope/config.yaml
      - ./data/pyroscope:/var/lib/pyroscope
    ports:
      - "4040:4040"
  alertmanager:
    image: prom/alertmanager:v0.28.1
    container_name: alertmanager
    restart: on-failure
    command:
      - --config.file=/etc/alertmanager/config.yaml
    volumes:
      - ./docker/mon/alertmanager/config.yaml:/etc/alertmanager/config.yaml:ro
    ports:
      - "9093:9093"
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: on-failure
    volumes:
      - ./docker/mon/grafana:/etc/grafana/provisioning/datasources
      - ./data/grafana:/var/lib/grafana
    ports:
      - "3000:3000"
  node-exporter:
    image: prom/node-exporter:v1.9.1
    container_name: node-exporter
    ports:
      - "9100:9100"
